#edited by Yusuf Hadiwinata I-3
#!/bin/bash
#duplicity collection-status file:///mnt/backup_smb/testing_backup/zimbra/2017-01-28/store/ | grep -e Full -e Incremental | sed -e 's/                Full         //g' -e 's/         Incremental         //g' -e 's/   .*$//g'
CONF_DIR="$(dirname $0)/.."
. "$CONF_DIR/backup.conf"

smb_mount ()
{
        SMB_OPTIONS=""
        MOUNTED_URL=$(mount | grep "$SMB_URL" | sed -e 's/^.*on //g' -e 's/ type.*$//')

        # if smb isn't mounted yet
        if [ "$MOUNTED_URL" != "$SMB_MOUNT_DIR" ]
        then
                # mounting smb
                echo "Mounting samba file share to $SMB_MOUNT_DIR"
                if [ "$SMB_USER" == "guest" ]
                then
                        SMB_OPTIONS="${SMB_OPTIONS}guest"
                else
                        SMB_OPTIONS="${SMB_OPTIONS}username=${SMB_USER},password=${SMB_PASSWORD},domain=${SMB_DOMAIN}"
                fi

                mkdir -p "$SMB_MOUNT_DIR"
                mount.cifs "$SMB_URL" "$SMB_MOUNT_DIR" -o "$SMB_OPTIONS"
                if [ "$?" -ne 0 ]
                then
                        echo "Could not mount smb" >&2 
                        exit -1
                else
                        MOUNTED_URL="$SMB_MOUNT_DIR"
                fi
        else
                echo "SMB file share is already mounted on $MOUNTED_URL"
        fi
        BACKUP_SAVE="${MOUNTED_URL}/${BACKUP_DIR}"
}

restore_zimbra()
{
	ZIMBRA_DATE=$(date -d "$1" +%F)
	DUPLICITY_DATE=$(date -d "$1")
	generate_timestamp "$ZIMBRA_DATE"
	ZIMBRA_BACKUP_DIR="$BACKUP_SAVE/zimbra/$FULL_TIMESTAMP"
	ZIMBRA_ZMLOCALCONFIG="$ZIMBRA_DIR/conf/localconfig.xml"
	ZIMBRA_LDAP_DIR="$ZIMBRA_DIR/data/ldap"
	ZIMBRA_LDAP_MDB_DIR="$ZIMBRA_LDAP_DIR/mdb"
	ZIMBRA_LDAP_CONFIG="$ZIMBRA_LDAP_DIR/config"
	ZIMBRA_BACKUP_ZMLOCALCONFIG="$ZIMBRA_BACKUP_DIR/localconfig.xml.$ZIMBRA_DATE"
	ZIMBRA_BACKUP_LDAP="$ZIMBRA_BACKUP_DIR/ldap.bak.$ZIMBRA_DATE"
	ZIMBRA_SLAPADD="$ZIMBRA_DIR/openldap/sbin/slapadd"

	ZIMBRA_BACKUP_MYSQL="$ZIMBRA_BACKUP_DIR/mysql.sql.$ZIMBRA_DATE"
	ZIMBRA_INDEX_BACKUP="$ZIMBRA_BACKUP_DIR/index"
	ZIMBRA_STORE_BACKUP="$ZIMBRA_BACKUP_DIR/store"
	ZIMBRA_INDEX_DIR="$ZIMBRA_DIR/index"
	ZIMBRA_STORE_DIR="$ZIMBRA_DIR/store"


	ZIMBRA_INDEX_DATE=""
	ZIMBRA_STORE_DATE=""
	
	IFS=$'\n'
	DAY_LIST=$(duplicity collection-status file://$ZIMBRA_INDEX_BACKUP | grep -e Full -e Incremental | sed -e 's/                Full         //g' -e 's/         Incremental         //g' -e 's/   .*$//g')
	for i in $DAY_LIST
	do
		x=$(date -d "$i" +%F)
		if [ "$x" == "$ZIMBRA_DATE" ]
		then
			ZIMBRA_INDEX_DATE="$i"
		fi
	done
	
	DAY_LIST=$(duplicity collection-status file://$ZIMBRA_STORE_BACKUP | grep -e Full -e Incremental | sed -e 's/                Full         //g' -e 's/         Incremental         //g' -e 's/   .*$//g')
	for i in $DAY_LIST
	do
		x=$(date -d "$i" +%F)
		if [ "$x" == "$ZIMBRA_DATE" ]
		then
			ZIMBRA_STORE_DATE="$i"
		fi
	done
	unset IFS
	


	#cek file backup
	#cek file zmlocalconfig
	if [ -e "$ZIMBRA_BACKUP_ZMLOCALCONFIG" ]
	then
		echo "zmlocalconfig found"
	else
		echo "ERROR: zmlocalconfig not found. Exiting" >&2
		exit 1
	fi

	#cek file ldap
	if [ -e "$ZIMBRA_BACKUP_LDAP" ]
	then
		echo "LDAP dump found"
	else
		echo "ERROR: LDAP dump not found. Exiting" >&2
		exit 1
	fi

	#cek file mysql
	if [ -e "$ZIMBRA_BACKUP_MYSQL" ]
	then
		echo "MySQL dump found"
	else
		echo "ERROR: MySQL dump not found. Exiting" >&2
		exit 1
	fi
	
	#cek direktori index
	VERIFY_DUPLICITY=$(duplicity collection-status "file://$ZIMBRA_INDEX_BACKUP" | grep "$ZIMBRA_INDEX_DATE")
	if [ -n "$VERIFY_DUPLICITY" ]
	then
		echo "Index backup found"
	else
		echo "ERROR: Index backup not found. Exiting" >&2
		exit 1
	fi
	
	#cek direktori store
	VERIFY_DUPLICITY=$(duplicity collection-status "file://$ZIMBRA_STORE_BACKUP" | grep "$ZIMBRA_STORE_DATE")
	if [ -n "$VERIFY_DUPLICITY" ]
	then
		echo "Store backup found"
	else
		echo "ERROR: Store backup not found. Exiting" >&2
		exit 1
	fi


	#stop zimbra
	/etc/init.d/zimbra stop

	#backup file zmlocalconfig yang sekarang
	ZIMBRA_ZMLOCALCONFIG_TMP="${ZIMBRA_ZMLOCALCONFIG}.bak.$(date +%Y%m%d%H%M%S)"
	echo "Backuping current zmlocalconfig"
	cp "$ZIMBRA_ZMLOCALCONFIG" "$ZIMBRA_ZMLOCALCONFIG_TMP"
	if [ "$?" -ne 0 ]
	then
		echo "Failed to backup zmlocalconfig, exiting"
		exit 1
	fi

	#todo: restore zmlocalconfig
	echo "Restore zmlocalconfig"
	cp  "$ZIMBRA_BACKUP_ZMLOCALCONFIG" "$ZIMBRA_ZMLOCALCONFIG"

	#todo: kalo fail, kembalikan backupan zmlocalconfig yang tadi
	if [ "$?" -ne 0 ]
	then
		echo "Failed to restore zmlocalconfig, restore previous zmlocalconfig" >&2
		cp "$ZIMBRA_ZMLOCALCONFIG_TMP" "$ZIMBRA_ZMLOCALCONFIG" 
	fi

	#todo: backup ldap yang sekarang
	echo "Backuping current ldap dir"
	ZIMBRA_LDAP_MDB_TMP="${ZIMBRA_LDAP_MDB_DIR}.bak.$(date +%Y%m%d%H%M%S)"
	mv "$ZIMBRA_LDAP_MDB_DIR" "$ZIMBRA_LDAP_MDB_TMP"
	if [ "$?" -ne 0 ]
	then
		echo "Failed to backup ldap dir, restore previous zmlocalconfig, exiting" >&2
		cp "$ZIMBRA_ZMLOCALCONFIG_TMP" "$ZIMBRA_ZMLOCALCONFIG" 
		exit 1
	fi
	

	#todo: restore ldap
	echo "Restore ldap"
	mkdir -p "$ZIMBRA_LDAP_MDB_DIR"/{db,logs} 
	chown -R zimbra:zimbra "$ZIMBRA_LDAP_MDB_DIR"
	chmod -R 755 "$ZIMBRA_LDAP_MDB_DIR"
	
	su - zimbra -c "$ZIMBRA_SLAPADD -F $ZIMBRA_LDAP_CONFIG -qcv -l $ZIMBRA_BACKUP_LDAP"
	
	#todo: kalo fail, kembalikan backupan zmlocalconfig dan ldap
	if [ "$?" -ne 0 ]
	then
		echo "restore LDAP failed, restore previous zmlocalconfig and ldap" >&2
		cp "$ZIMBRA_ZMLOCALCONFIG_TMP" "$ZIMBRA_ZMLOCALCONFIG" 
		rm -rf "$ZIMBRA_LDAP_MDB_DIR"
		mv "$ZIMBRA_LDAP_MDB_TMP" "$ZIMBRA_LDAP_MDB_DIR"
		exit 1
	fi

	#backup mysql
	ZIMBRA_MYSQL_SERVER="$ZIMBRA_DIR/bin/mysql.server"
	ZIMBRA_MYSQL_BIN="$ZIMBRA_DIR/bin/mysql"
	echo "Backuping MYSQL"
	su - zimbra -c "$ZIMBRA_MYSQL_SERVER start"
	ZIMBRA_MYSQL_TMP="/tmp/mysql.bak.$(date +%Y%m%d%H%M%S)"
	ZIMBRA_MYSQLDUMP="$ZIMBRA_DIR/mysql/bin/mysqldump"
	ZIMBRA_ZMLOCALCONFIG="$ZIMBRA_DIR/bin/zmlocalconfig"
        ZIMBRA_MYSQLSOCK="$ZIMBRA_DIR/db/mysql.sock"
	#su - zimbra -c "$ZIMBRA_MYSQLDUMP -f -S $ZIMBRA_MYSQLSOCK -u zimbra --password=`$ZIMBRA_ZMLOCALCONFIG -s -m nokey zimbra_mysql_password` --all-databases --single-transaction > $ZIMBRA_MYSQL_TMP"
	su - zimbra -c "$ZIMBRA_MYSQLDUMP -f -S $ZIMBRA_MYSQLSOCK -u root --password=`$ZIMBRA_ZMLOCALCONFIG -s -m nokey mysql_root_password` --all-databases --single-transaction --flush-logs > $ZIMBRA_MYSQL_TMP"


	#restore mysql
	echo "Restore MySQL"
	su - zimbra -c "$ZIMBRA_MYSQL_BIN -f -u root --password=`$ZIMBRA_ZMLOCALCONFIG -s -m nokey mysql_root_password` < $ZIMBRA_BACKUP_MYSQL"
	su - zimbra -c "$ZIMBRA_MYSQL_SERVER stop"


	export PASSPHRASE="$DUPLICITY_PASSPHRASE"

	#backup index dir
	echo "Backup index dir"
	ZIMBRA_INDEX_TMP="${ZIMBRA_INDEX_DIR}.$(date +%Y%m%d%H%M%S)"
	mv "$ZIMBRA_INDEX_DIR" "$ZIMBRA_INDEX_TMP"
	#backup store dir
	echo "Backup store dir"
	ZIMBRA_STORE_TMP="${ZIMBRA_STORE_DIR}.$(date +%Y%m%d%H%M%S)"
	mv "$ZIMBRA_STORE_DIR" "$ZIMBRA_STORE_TMP"
	
	#restore index dir
	echo "Restore Index dir"
	mkdir -p "$ZIMBRA_INDEX_DIR"
	chown zimbra:zimbra "$ZIMBRA_INDEX_DIR"
	chmod 755 "$ZIMBRA_INDEX_DIR"
	duplicity -t $(date -d "$ZIMBRA_INDEX_DATE" +'%Y-%m-%dT%H:%M:%S') "file://$ZIMBRA_INDEX_BACKUP" "$ZIMBRA_INDEX_DIR"
	echo "Restore Store dir"
	mkdir -p "$ZIMBRA_STORE_DIR"
	chown zimbra:zimbra "$ZIMBRA_STORE_DIR"
	chmod 755 "$ZIMBRA_STORE_DIR"
	duplicity -t $(date -d "$ZIMBRA_STORE_DATE" '+%Y-%m-%dT%H:%M:%S') "file://$ZIMBRA_STORE_BACKUP" "$ZIMBRA_STORE_DIR"

	/etc/init.d/zimbra start
}



DELIMITER="##################################################"

MENU_DISPLAY=()
MENU_COMMAND=()
MENU_NUM=0
MENU_BACK=""
menu_day()
{
	IFS=$'\n'
	if [ "$1" == "zimbra" ]
	then
		FETCH_DIR="$BACKUP_SAVE/zimbra/$2/store"
		SERVICE_COMMAND="restore_zimbra"
	elif [ "$1" == "alfresco" ]
	then
		FETCH_DIR="$BACKUP_SAVE/alfresco/$2/alf_data"
		SERVICE_COMMAND="restore_alfresco"
	elif [ "$1" == "openfire" ]
	then
		FETCH_DIR="$BACKUP_SAVE/openfire/$2/openfire"
		SERVICE_COMMAND="restore_openfire"
	fi

	DAY_LIST=$(duplicity collection-status file://$FETCH_DIR | grep -e Full -e Incremental | sed -e 's/                Full         //g' -e 's/         Incremental         //g' -e 's/   .*$//g')
	PREV=""
	MENU_NUM=0
	for i in $DAY_LIST
	do
		SIMPLE_DATE=$(date -d "$i" +%F)
		if [ "$SIMPLE_DATE" != "$PREV" ]
		then
			MENU_NUM=$[MENU_NUM+1]
		fi
		PREV="$SIMPLE_DATE"
		MENU_DISPLAY[$MENU_NUM]="$(date -d $i +%F)"
		MENU_COMMAND[$MENU_NUM]="$SERVICE_COMMAND \"$i\""
	done
	echo "Restore Day:"
	display_menu
	MENU_BACK="menu_day $1 $2"
	unset IFS
	echo "$DELIMITER"
	eval ${MENU_COMMAND[$PICK]}
}
menu_service()
{
	MENU_NUM=4
	MENU_DISPLAY=("" "zimbra" "alfresco" "openfire" "exit")
	MENU_COMMAND=("" "menu_week zimbra" "menu_week alfresco" "menu_week openfire" "exit")
	x=1
	echo "Service you want restore:"
	while [ $MENU_NUM -ge $x ]
	do
		echo "$x) ${MENU_DISPLAY[$x]}"
		x=$[x+1]
	done
	read -p "Choose option: " PICK
	
	MENU_BACK="menu_service"
	echo "$DELIMITER"
	eval ${MENU_COMMAND[$PICK]}
}

display_menu()
{
	MENU_NUM=$[MENU_NUM+1]
	MENU_DISPLAY[$MENU_NUM]="Back"
	MENU_COMMAND[$MENU_NUM]="$MENU_BACK"
	MENU_NUM=$[MENU_NUM+1]
	MENU_DISPLAY[$MENU_NUM]="Home"
	MENU_COMMAND[$MENU_NUM]="menu_service"
	MENU_NUM=$[MENU_NUM+1]
	MENU_DISPLAY[$MENU_NUM]="Exit"
	MENU_COMMAND[$MENU_NUM]="exit"
	x=1
	while [ $MENU_NUM -ge $x ]
	do
		echo "$x) ${MENU_DISPLAY[$x]}"
		x=$[x+1]
	done
	read -p "Choose option: " PICK

}

menu_week()
{
	echo "Restore Week:"
	IFS=$'\n'
	WEEK_LIST="$(ls $BACKUP_SAVE/$1)"
	MENU_NUM=0
	for i in $WEEK_LIST
	do
		MENU_NUM=$[MENU_NUM+1]
		MENU_DISPLAY[$MENU_NUM]="$i"
		MENU_COMMAND[$MENU_NUM]="menu_day $1 $i"
	done
	display_menu
	MENU_BACK="menu_week $1"
	unset IFS
	echo "$DELIMITER"
	eval ${MENU_COMMAND[$PICK]}
}

#restore_zimbra()
#{
#	echo $1
#}

FULL_TIMESTAMP=""
NOW_TIMESTAMP=""
generate_timestamp ()
{
        FULL_DAY_NUM=$(date -d "${FULL_DAY}" +%w)
        BACKUP_NUM=$(date -d "$1" +%w)
        if [ "$BACKUP_NUM" -ge "$FULL_DAY_NUM" ]
        then
                DAYS_AGO_NUM=$[BACKUP_NUM-FULL_DAY_NUM]
        else
                DAYS_AGO_NUM=$[7+BACKUP_NUM-FULL_DAY_NUM]
        fi
        FULL_TIMESTAMP=$(date -d "$1 -${DAYS_AGO_NUM} days" +%F)
        NOW_TIMESTAMP=$(date +%F)
}

if [ "$URL_TYPE" == "smb" ]
then
        smb_mount
else
        BACKUP_SAVE="$BACKUP_DIR"
fi

echo "Backup will be restored from $BACKUP_SAVE"
menu_service 
